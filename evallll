# Dashboard - Gestión de Eventos (SPA)

## 📌 Descripción

**Dashboard** es una Single Page Application (SPA) desarrollada para facilitar la gestión de eventos. Esta aplicación permite a organizadores (administradores) crear, editar y eliminar eventos, y a los visitantes visualizar y registrarse en ellos, todo dentro de una experiencia fluida y responsiva.

El proyecto incluye funcionalidades clave como autenticación de usuarios, protección de rutas, persistencia de sesión y operaciones CRUD conectadas a una base de datos simulada mediante `json-server`.

---

## 🚀 Tecnologías utilizadas

- HTML5
- CSS3
- JavaScript (ES6+)
- json-server
- LocalStorage
- Routing personalizado con `Router.js`

---

## 🎯 Casos de uso

- **Administrador:** Puede crear, editar, eliminar y ver eventos. Tiene acceso total a la gestión de la plataforma.
- **Visitante:** Puede registrarse, iniciar sesión, ver eventos disponibles y registrarse en ellos.

---

## 🛠️ Funcionalidades principales

### 1. 🧑‍💻 Sistema de autenticación
- Registro de usuarios con roles: **Administrador** o **Visitante**.
- Inicio de sesión con validación.
- Protección de rutas según el rol mediante guardián en `Router.js`.

### 2. 💾 Persistencia de sesión
- Uso de **Local Storage** para guardar la información del usuario.
- La sesión persiste incluso después de recargar la página.

### 3. 🔄 CRUD y consistencia de datos
- Operaciones **Crear, Leer, Actualizar y Eliminar (CRUD)** sobre eventos.
- Sincronización en tiempo real con `json-server`.

### 4. 📱 Interfaz de usuario
- Diseño **responsive** adaptable a diferentes dispositivos.
- Formularios intuitivos para el registro, login y gestión de eventos.
- Navegación fluida entre vistas de la SPA.

---

## ✅ Criterios de aceptación

- [x] Los usuarios pueden registrarse e iniciar sesión según su rol.
- [x] Las rutas están protegidas por rol y el sistema de autenticación funciona correctamente.
- [x] La información de sesión se guarda y persiste en Local Storage.
- [x] CRUD completo funcional para eventos desde la vista del administrador.
- [x] Los visitantes pueden registrarse a eventos disponibles.
- [x] json-server mantiene la consistencia e integridad de los datos.
- [x] El diseño es responsivo y usable en múltiples dispositivos.
- [x] El código está comentado y organizado.
- [x] El repositorio cuenta con commits descriptivos por funcionalidad.

---

## 📂 Estructura del proyecto





# Dashboard - Event Management SPA

## 📌 Description

**Dashboard** is a Single Page Application (SPA) designed to help manage events efficiently. The app allows event organizers (admins) to create, update, and delete events, while visitors can browse and register for available events. It offers a seamless and responsive user experience.

This project includes essential features like user authentication, protected routes, session persistence, and full CRUD operations using a simulated database with `json-server`.

---

## 🚀 Technologies Used

- HTML5  
- CSS3  
- JavaScript (ES6+)  
- json-server  
- LocalStorage  
- Custom Routing with `Router.js`  

---

## 🎯 Use Cases

- **Admin:** Can create, edit, delete, and view events. Has full access to manage the platform.
- **Visitor:** Can register, log in, view available events, and sign up for them.

---

## 🛠️ Key Features

### 1. 🧑‍💻 Authentication System
- User registration with two roles: **Admin** and **Visitor**.
- Login for registered users.
- Route protection based on roles using a guard in `Router.js`.

### 2. 💾 Session Persistence
- **LocalStorage** is used to save and persist user session data.
- User sessions persist even after reloading the page.

### 3. 🔄 CRUD & Data Consistency
- Full **Create, Read, Update, Delete (CRUD)** operations on events.
- Real-time data sync with `json-server`.

### 4. 📱 User Interface
- Fully **responsive design** for different devices.
- Intuitive forms for registration, login, and event management.
- Smooth navigation between views within the SPA.

---

## ✅ Acceptance Criteria

- [x] Users can register and log in based on their assigned role.
- [x] Routes are protected and the authentication system works correctly.
- [x] User session is stored and persists via LocalStorage.
- [x] Admins have full CRUD access for events.
- [x] Visitors can view and sign up for available events.
- [x] Data is synchronized correctly with `json-server`.
- [x] The design is responsive and user-friendly across devices.
- [x] The code is commented and organized.
- [x] The repository includes descriptive commits per feature.

---

## 📂 Project Structure


